# -*- coding: utf-8 -*-
"""Handwritten digit recognition

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q36zOLulLjrDWtOIeBeQUe8DCVxTo-6u
"""

from google.colab import files
uploaded = files.upload()

import os

# List all files in the current directory to verify the uploaded files
print(os.listdir())

import os
import cv2
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf

mnist = tf.keras.datasets.mnist
(X_train, y_train), (X_test, y_test) = mnist.load_data()

X_train = tf.keras.utils.normalize(X_train, axis = 1)
X_test = tf.keras.utils.normalize(X_test, axis = 1)

model = tf.keras.models.Sequential()
model.add(tf.keras.layers.Flatten(input_shape = (28,28))) # Transfer to 1D
model.add(tf.keras.layers.Dense(128, activation = 'relu')) #FC layer
model.add(tf.keras.layers.Dense(128, activation = 'relu'))
model.add(tf.keras.layers.Dense(128, activation = 'relu'))
model.add(tf.keras.layers.Dense(10, activation = 'softmax'))

model.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics = ['accuracy'])
#Adam adapts the learning rate during training based on the 1st and 2nd gradients,sparse_categorical_crossentropy: The target labels are integers instead of one-hot encoded vectors(Classification tasks with more than two classes.)

model.fit(X_train, y_train, epochs = 15)

#model.save('handwritten.keras')

#model = tf.keras.models.load_model("handwritten.keras")

loss, accuracy = model.evaluate(X_test, y_test)
print(loss)
print(accuracy)

# while os.path.isfile(f'/digit 1.png'):
#     try:
#         img = cv2.imread(f'/digit 1.png')[:,:,0]
#         img = np.invert(np.array([img]))
#         prediction = model.predict(img)
#         print(f'This digit is probably a {np.argmax(prediction)}')
#         plt.imshow(img[0], cmap = plt.cm.binary)
#         plt.show()
#     except:
#         print('Error')

import os
import cv2
import numpy as np
import matplotlib.pyplot as plt

image_number = 1
while os.path.isfile(f'digit {image_number}.png'):
    try:
        print(f"Trying to read digit {image_number}.png...")
        img = cv2.imread(f'digit {image_number}.png', cv2.IMREAD_GRAYSCALE)

        if img is None:
            print(f"Error: Image digit {image_number}.png could not be read.")
            image_number += 1
            continue

        print(f"Original image shape: {img.shape}")
        img = cv2.resize(img, (28, 28))
        print(f"Resized image shape: {img.shape}")

        # Normalize the image
        img = img / 255.0

        # Ensure the image has the right shape for the model: (1, 28, 28)
        img = img.reshape(1, 28, 28).astype('float32')
        print(f"Processed image shape: {img.shape}")

        # Make a prediction
        prediction = model.predict(img)

        # Print the raw prediction output
        print(f"Raw prediction output: {prediction}")

        predicted_digit = np.argmax(prediction) #To find maximum values.
        confidence = np.max(prediction) * 100  # Convert to percentage

        print(f'This digit is probably a {predicted_digit} with confidence {confidence:.2f}%')

        plt.imshow(img[0], cmap=plt.cm.binary)
        plt.axis('off')  # Hide axis
        plt.show()

    except Exception as e:
        print(f"Error during processing: {e}")

    finally:
        image_number += 1